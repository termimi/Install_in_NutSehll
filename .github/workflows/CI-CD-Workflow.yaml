name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  check-commit:
    name: Check Commit
    runs-on: ubuntu-latest
    outputs:
      run_workflow: ${{ steps.commit_check.outputs.run_workflow }}
      deploy_azure: ${{ steps.commit_check.outputs.deploy_azure }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Commit Message
        id: commit_check
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"feat"* ]]; then
            echo "::set-output name=run_workflow::true"
            echo "Feature detected"
          else
            echo "::set-output name=run_workflow::false"
            echo "No feature detected"
          fi

          if [[ "$COMMIT_MESSAGE" == *"feat"* && "$COMMIT_MESSAGE" == *"web"* ]]; then
            echo "::set-output name=deploy_azure::true"
            echo "Web Feature detected"
          else
            echo "::set-output name=deploy_azure::false"
            echo "No Web Feature detected"
          fi

  run-tests:
    name: Run Tests
    needs: check-commit
    if: ${{ needs.check-commit.outputs.run_workflow == 'true' }}
    runs-on: windows-latest
    outputs:
      tests_passed: ${{ steps.tests.outputs.tests_passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        run: |
          cd script
          powershell
          Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force

      - name: Run Unit Tests
        id: tests
        run: |
          cd script
          .\unitTest.ps1
          if ($?) 
          {
            echo "::set-output name=tests_passed::false"
            Write-Host "Tests Passed"
          } 
          else
          {
            echo "::set-output name=tests_passed::false"
            Write-Host "Tests Failed"
            exit 1
          }
          exit 0

  deploy-db:
    name: Deploy DB
    needs: run-tests
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install MySQL Client
        run: |
          sudo apt update
          sudo apt install -y mysql-client

      - name: Push Script to DB
        env:
          MYSQL_USERNAME: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        run: |
          SCRIPT_CONTENT=$(cat script/install_in_nutshell.ps1 | base64)
          mysql -h $MYSQL_HOST -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS install_in_nutShell;"
          mysql -h $MYSQL_HOST -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -D install_in_nutShell -e "DROP TABLE IF EXISTS script_file;"
          mysql -h $MYSQL_HOST -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -D install_in_nutShell -e "CREATE TABLE IF NOT EXISTS script_file (name VARCHAR(255), content BLOB);"
          mysql -h $MYSQL_HOST -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -D install_in_nutShell -e "INSERT INTO script_file (name, content) VALUES ('install_in_nutshell', FROM_BASE64('$SCRIPT_CONTENT'));"
          echo "Script Injected !"

  build-staging:
    name: Build Staging
    needs: run-tests
    if: ${{ needs.run-tests.outputs.tests_passed == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install
        run: |
          cd web/backend
          npm install

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: release.zip

  deploy-staging:
    name: Deploy Staging
    needs: build-staging
    if: ${{ needs.run-tests.outputs.tests_passed == 'false' }}
    runs-on: ubuntu-latest
    environment:
      name: 'Pre-Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'NutShellStaging'
          slot-name: 'Pre-Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_469CC57B2B9E4D39B2B6EDCDC9879EE7 }}
          package: .

  build-azure:
    name: Build Production Azure
    needs: deploy-db
    if: ${{ needs.check-commit.outputs.deploy_azure == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install
        run: |
          cd web/backend
          npm install

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: release.zip

  deploy-azure:
    name: Deploy Production Azure
    needs: build-azure
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'NutShellLinux'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FE039701AF174CC79A33B782432D7318 }}
          package: .
